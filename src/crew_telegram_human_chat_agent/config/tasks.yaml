user_connection_task:
  description: Connect to Telegram using {telegram_app_id}, {telegram_app_hash}, and {phone_number} credentials and join group {group_id} to start receiving messages.
  expected_output: A successful connection established as a real user in group {group_id}, ready for message monitoring.
  async_execution: false
  agent: UserConnectionOperator
  inputs:
    telegram_app_id: "{{ telegram_app_id }}"
    telegram_app_hash: "{{ telegram_app_hash }}"
    phone_number: "{{ phone_number }}"
    group_id_or_invite: "{{ group_id }}"

semantic_monitoring_task:
  description: Analyze recent messages from group {group_id} and determine if they semantically match any of the topics in {target_topic_list}.
  expected_output: A list of matched messages with topics.
  async_execution: false
  agent: GrokSemanticMonitor
  inputs:
    group_username: "{{ group_id }}"
    telegram_app_id: "{{ telegram_app_id }}"
    telegram_app_hash: "{{ telegram_app_hash }}"
    phone_number: "{{ phone_number }}"
    limit: 5
    target_topics: "{{ target_topic_list }}"

engagement_task:
  description: If any message matched semantically, generate a friendly and human-like Persian response to that message using {response_templates}.
  expected_output: A Persian, human-style response aligned with Telegram group culture.
  async_execution: false
  agent: GrokEngager
  context:
    - semantic_monitoring_task
  inputs:
    message: "{{ semantic_monitoring_task.output.message }}"
    matched_topic: "{{ semantic_monitoring_task.output.matched_topic }}"
    response_templates: "{{ response_templates }}"

logging_task:
  description: Log the full interaction including message, matched topic, and generated response.
  expected_output: A log file entry with all the necessary information for audit and review.
  async_execution: false
  agent: LoggingCoordinator
  context:
    - semantic_monitoring_task
    - engagement_task
  inputs:
    message: "{{ semantic_monitoring_task.output.message }}"
    matched_topic: "{{ semantic_monitoring_task.output.matched_topic }}"
    generated_response: "{{ engagement_task.output }}"
